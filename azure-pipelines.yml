# ASP.NET Core (.NET Framework)
# Build and test ASP.NET Core projects targeting the full .NET Framework.
# Add steps that publish symbols, save build artifacts, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/dotnet-core

trigger:
- main

pool:
  vmImage: 'windows-latest'

variables:
  solution: '**/*.sln'
  buildPlatform: 'Any CPU'
  buildConfiguration: 'Release'

steps:
- task: NuGetToolInstaller@1
- task: NuGetCommand@2
  inputs:
    restoreSolution: '$(solution)'

- task: PowerShell@2
  displayName: 'Assembly Version Generation'
  # first part - version number increment
  # if build fails, this new version will not be sent to repository
  inputs:
    targetType: 'inline'
    script: |
          $projectName = '.\azure-devops-versioning\azure-devops-versioning.csproj'

          git --version
          git --html-path
          git branch DevOps/test_$(Build.BuildNumber) --quiet
          git checkout DevOps/test_$(Build.BuildNumber) --quiet
          git status

          $data = foreach($str in Get-Content $projectName)  # going through file lines
          {
            if ($str -like '*<AssemblyVersion>*')  # looking for AssemblyVersion
            {
              
              $firstAssemblyIndex = $str.IndexOf('<AssemblyVersion>') # calculating spaces 
              $str -match ('(<AssemblyVersion>)(.+)(</AssemblyVersion>)$') # creating array of version parts
              $ver = $matches[2].split('.') # removing dots
              $ver[3] = ([int]$ver[3] + 1) # incrementing by 1
              $newVerStr = $ver -join '.' # bringing dots back
              $newStr = '{0}{1}{2}' -f $matches[1], $newVerStr, $matches[3] # gathering back version parts
              
              for ($i=1; $i -le $firstAssemblyIndex; $i++){ # adding back spaces 
              $newStr = '{0}{1}' -f (' '), $newStr
              }
              Write-Host $newStr        # showing new version number to console
              
              (Get-Content $projectName) -replace $str,$newStr | Set-Content $projectName       # replacing version string in AssemblyVersion file
            }
            else
            {
              $str      # did not find AssemblyVersion - line remains unchanged
            }
          }

          git config user.email "azure.agent@profinfotech.ru"
          git config user.name "Azure Agent"
          git add $projectName                  # indexing changed file
          git commit -m "[skip ci] Pipeline Modification: AssemblyVersion = $newVerStr"         # commiting changed file with the comment
- task: VSBuild@1
  inputs:
    solution: '$(solution)'
    msbuildArgs: '/p:DeployOnBuild=true /p:WebPublishMethod=Package /p:PackageAsSingleFile=true /p:SkipInvalidConfigurations=true /p:DesktopBuildPackageLocation="$(build.artifactStagingDirectory)\WebApp.zip" /p:DeployIisAppPath="Default Web Site"'
    platform: '$(buildPlatform)'
    configuration: '$(buildConfiguration)'

- task: PowerShell@2
  displayName: 'Version Update to main'
      # second part - build was successful - sending new version to the repository
  inputs:
    targetType: 'inline'
    script: |
          git checkout main --quiet         # switching to main
          git pull --quiet                  # getting fresh version of main

          git merge DevOps/test_$(Build.BuildNumber) -m "[skip ci] Pipeline Modification: AssemblyVersion = $newVerStr" --quiet     # merging local branch with main
         
          git branch -d DevOps/test_$(Build.BuildNumber)    # deleting local branch

          git push https://kanailov:$(PAToken)@github.com/Kanailov/azure-devops-versioning.git main --quiet     # sending changes to remote repository