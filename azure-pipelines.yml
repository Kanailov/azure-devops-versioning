# ASP.NET Core (.NET Framework)
# Build and test ASP.NET Core projects targeting the full .NET Framework.
# Add steps that publish symbols, save build artifacts, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/dotnet-core

trigger:
- main

pool:
  vmImage: 'windows-latest'

variables:
  solution: '**/*.sln'
  buildPlatform: 'Any CPU'
  buildConfiguration: 'Release'

steps:
- task: NuGetToolInstaller@1
- task: NuGetCommand@2
  inputs:
    restoreSolution: '$(solution)'

- task: PowerShell@2
  displayName: 'Assembly Version Generation'
  # first part - version number increment
  # if build fails, this new version will not be sent to repository
  inputs:
    targetType: 'inline'
    script: |
          $ProjectFile = '.\azure-devops-versioning\azure-devops-versioning.csproj'

          git branch DevOps/test_$(Build.BuildNumber) --quiet
          git checkout DevOps/test_$(Build.BuildNumber) --quiet

          foreach($line in Get-Content -Path $ProjectFile) 
          {$AssemblyVersionLine = $line | Select-String -Pattern '<AssemblyVersion>' -CaseSensitive
           if ($AssemblyVersionLine) {break} 
          }

          $AssemblyVersionLine -match ('(<AssemblyVersion>)(.+)(</AssemblyVersion>)$')
          $Version = $Matches[2]
          $VerParts = $Version.split('.')
          $VerParts[3] = ([int]$VerParts[3] + 1)
          $NewVersion = $VerParts -join '.'
          $NewAssemblyVersionLine = $AssemblyVersionLine -replace $Version, $NewVersion

          (Get-Content $ProjectFile) | Foreach-Object { $_ -replace $AssemblyVersionLine, $NewAssemblyVersionLine } | Set-Content $ProjectFile

          git config user.email "azure.agent@profinfotech.ru"
          git config user.name "Azure Agent"
          git add $ProjectFile                  # indexing changed file
          git commit -m "[skip ci] Pipeline Modification: AssemblyVersion = $NewVersion"         # commiting changed file with the comment
- task: VSBuild@1
  inputs:
    solution: '$(solution)'
    msbuildArgs: '/p:DeployOnBuild=true /p:WebPublishMethod=Package /p:PackageAsSingleFile=true /p:SkipInvalidConfigurations=true /p:DesktopBuildPackageLocation="$(build.artifactStagingDirectory)\WebApp.zip" /p:DeployIisAppPath="Default Web Site"'
    platform: '$(buildPlatform)'
    configuration: '$(buildConfiguration)'

- task: PowerShell@2
  displayName: 'Send new version to main'
      # second part - build was successful - sending new version to the repository
  inputs:
    targetType: 'inline'
    script: |
          git checkout main --quiet         # switching to main
          git pull --quiet                  # getting fresh version of main

          git merge DevOps/test_$(Build.BuildNumber) -m "[skip ci] Pipeline Modification: AssemblyVersion = $NewVersion" --quiet     # merging local branch with main
         
          git branch -d DevOps/test_$(Build.BuildNumber)    # deleting local branch

          git push https://kanailov:$(PAToken)@github.com/Kanailov/azure-devops-versioning.git main --quiet     # sending changes to remote repository
          
